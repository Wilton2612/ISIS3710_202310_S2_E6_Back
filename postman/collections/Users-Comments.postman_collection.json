{
	"info": {
		"_postman_id": "ae8455b2-0bde-46df-a3c3-de2f3215195e",
		"name": "Users-Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26486933"
	},
	"item": [
		{
			"name": "Add User Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"user_id\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Juan Perez\",\n    \"email\": \"j.perez@uniandes.edu.co\",\n    \"password\": \"contrasenaSegura\",\n    \"image\": \"imagen.url.com\",\n    \"user\": \"j.perez\",\n    \"userType\": \"student\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Add User",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"name\": \"Juan Perez\",\n    \"mail\": \"j.perez@uniandes.edu.co\",\n    \"password\": \"contrasenaSegura\",\n    \"image\": \"imagen.url.com\",\n    \"login\": \"j.perez\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Add a comment Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"comment_id_1\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"rating\": 5,\r\n   \"text\": \"Muy buen apunte sobre los fundamentos básicos de infraestructura tecnológica, a mi gusto le faltan algunas cosas puntuales pero demás está bastante bien \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/comments",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": [
				{
					"name": "Add a comment",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"puntuación\": \"8\",\r\n   \"comentario\": \"Muy buen apunte sobre los fundamentos básicos de infraestructura tecnológica, a mi gusto le faltan algunas cosas puntuales pero demás está bastante bien \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 45687645,\n    \"rating\": 5,\n    \"text\": \"Muy buen apunte sobre los fundamentos básicos de infraestructura tecnológica, a mi gusto le faltan algunas cosas puntuales pero demás está bastante bien \"\n}"
				}
			]
		},
		{
			"name": "Add a comment Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"comment_id_2\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"rating\": 5,\r\n   \"text\": \"Muy buen apunte sobre los fundamentos básicos de infraestructura tecnológica, a mi gusto le faltan algunas cosas puntuales pero demás está bastante bien \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/comments",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": [
				{
					"name": "Add a comment",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"puntuación\": \"8\",\r\n   \"comentario\": \"Muy buen apunte sobre los fundamentos básicos de infraestructura tecnológica, a mi gusto le faltan algunas cosas puntuales pero demás está bastante bien \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 45687645,\n    \"rating\": 5,\n    \"text\": \"Muy buen apunte sobre los fundamentos básicos de infraestructura tecnológica, a mi gusto le faltan algunas cosas puntuales pero demás está bastante bien \"\n}"
				}
			]
		},
		{
			"name": "Add a comment to a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments",
						"{{comment_id_1}}"
					]
				}
			},
			"response": [
				{
					"name": "Add a comment to a student",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments",
								"{{comment_id_1}}"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"id\": 1,\r\n    \"name\": \"Juan Perez\",\r\n    \"mail\": \"j.perez@uniandes.edu.co\",\r\n    \"password\": \"contrasenaSegura\",\r\n    \"image\": \"imagen.url.com\",\r\n    \"login\": \"j.perez\",\r\n    \"userType\": \"student\",\r\n    \"comentario\":\r\n   [\r\n      {\r\n        \"id\": 6486684,\r\n        \"puntuación\": 9,\r\n        \"comentario\": \"Muy buen apunte sobre los fundamentos básicos de infraestructura tecnológica, a mi gusto le faltan algunas cosas puntuales pero demás está bastante bien \"\r\n    }\r\n   ]\r\n}"
				}
			]
		},
		{
			"name": "Add an invalid comment to a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The comment with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments/0",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments",
						"0"
					]
				}
			},
			"response": [
				{
					"name": "Add an invalid comment to a user",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{user_id}}/comments/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The comment with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Add a comment to an invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The user with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/00000000-0000-0000-0000-000000000000/comments/{{comment_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"00000000-0000-0000-0000-000000000000",
						"comments",
						"{{comment_id_1}}"
					]
				}
			},
			"response": [
				{
					"name": "Add a comment to an invalid user",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/00000000-0000-0000-0000-000000000000/comments/{{comment_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"00000000-0000-0000-0000-000000000000",
								"comments",
								"{{comment_id_1}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"No se encontro el usuario con ese id\"\r\n}"
				}
			]
		},
		{
			"name": "Get a comment of a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments",
						"{{comment_id_1}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a comment of a user",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments",
								"{{comment_id_1}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n        \"id\": 86456456,\r\n        \"puntuación\": 8,\r\n        \"comentario\": \"Muy buen apunte sobre los fundamentos básicos de infraestructura tecnológica, a mi gusto le faltan algunas cosas puntuales pero demás está bastante bien \"\r\n}"
				}
			]
		},
		{
			"name": "Get an invalid comment of a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The comment with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments/0",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments",
						"0"
					]
				}
			},
			"response": [
				{
					"name": "Get an invalid comment of a user",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{user_id}}/comments/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The comment with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Get a comment of an invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The user with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/00000000-0000-0000-0000-000000000000/comments/{{comment_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"00000000-0000-0000-0000-000000000000",
						"comments",
						"{{comment_id_1}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a comment of an invalid user",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/00000000-0000-0000-0000-000000000000/comments/{{comment_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"00000000-0000-0000-0000-000000000000",
								"comments",
								"{{comment_id_1}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The user with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Get a comment non-associated to a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The comment with the given id is not associated to the user\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments",
						"{{comment_id_2}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a comment non-associated to a user",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_2}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments",
								"{{comment_id_2}}"
							]
						}
					},
					"status": "Precondition Failed",
					"code": 412,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 412,\r\n   \"message\": \"The comment with the given id is not associated to the user\"\r\n}"
				}
			]
		},
		{
			"name": "Get all comments of a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments"
					]
				}
			},
			"response": [
				{
					"name": "Get all comments of a user",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{user_id}}/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\r\n   {\r\n    \"id\": 12456456456,\r\n    \"puntuación\": 9,\r\n    \"comentario\": \"Muy buen apunte sobre los fundamentos básicos de infraestructura tecnológica, a mi gusto le faltan algunas cosas puntuales pero demás está bastante bien \"\r\n}, \r\n{\r\n    \"id\": 564324345,\r\n    \"puntuación\": 2,\r\n    \"comentario\": \"Mal aporte, no me gustó \"\r\n}\r\n]"
				}
			]
		},
		{
			"name": "Get all comments of an invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The user with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/00000000-0000-0000-0000-000000000000/comments",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"00000000-0000-0000-0000-000000000000",
						"comments"
					]
				}
			},
			"response": [
				{
					"name": "Get all comments of an invalid user",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/00000000-0000-0000-0000-000000000000/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"00000000-0000-0000-0000-000000000000",
								"comments"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The user with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Update comments of a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n       \"id\": \"{{comment_id_2}}\"\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments"
					]
				}
			},
			"response": [
				{
					"name": "Update comments of a user",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user_id}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments"
							]
						}
					},
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n               \"id\": \"202020414\",\r\n               \"name\": \"Jairo Gómez\",\r\n               \"email\": \"jn.gomezm1@uniandes.edu.co\",\r\n               \"password\":\"xxxx-xxxx-xxxxx\",\r\n               \"user\":\"jngm8\",\r\n               \"image\": \"https://www.portrait.gov.au/files/b/b/2/c/i5398.jpg\",\r\n   \"comments\": [\r\n       {\r\n       \"id\": 5845256,\r\n       \"rating\": 2,\r\n       \"text\": \"Buen apunte del estudiante\"\r\n       }\r\n   ]\r\n}"
				}
			]
		},
		{
			"name": "Update invalid comments of a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The comment with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n       \"id\": 0\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments"
					]
				}
			},
			"response": [
				{
					"name": "Update invalid comments of a user",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments",
								"{{comment_id_1}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The comment with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Update comments of an invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The user with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n       \"id\": \"{{comment_id_2}}\"\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/00000000-0000-0000-0000-000000000000/comments",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"00000000-0000-0000-0000-000000000000",
						"comments"
					]
				}
			},
			"response": [
				{
					"name": "Update comments of an invalid user",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{course_id_2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/00000000-0000-0000-0000-000000000000/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"00000000-0000-0000-0000-000000000000",
								"comments"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The user with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Delete a comment of a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"   pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments",
						"{{comment_id_1}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a comment of a user",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_2}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments",
								"{{comment_id_2}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete a comment of an invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The user with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/00000000-0000-0000-0000-000000000000/comments/{{comment_id_2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"00000000-0000-0000-0000-000000000000",
						"comments",
						"{{comment_id_2}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a comment of an invalid user",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/00000000-0000-0000-0000-000000000000/comments/{{comment_id_2}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"00000000-0000-0000-0000-000000000000",
								"comments",
								"{{comment_id_2}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The user with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Delete an invalid comment of a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The comment with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments/0",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments",
						"0"
					]
				}
			},
			"response": [
				{
					"name": "Delete an invalid comment of a user",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{user_id}}/comments/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The comment with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a comment non-associated to a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The comment with the given id is not associated to the user\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"comments",
						"{{comment_id_1}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a comment non-associated to a user",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{user_id}}/comments/{{comment_id_1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"comments",
								"{{comment_id_1}}"
							]
						}
					},
					"status": "Precondition Failed",
					"code": 412,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 412,\r\n   \"message\": \"The comment with the given id is not associated to the user\"\r\n}"
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": " http://localhost:3000/api/v1"
		}
	]
}